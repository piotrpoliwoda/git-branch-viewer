import { app, BrowserWindow, dialog, ipcMain, globalShortcut } from 'electron';
import { exec } from 'child_process';
import { promisify } from 'util';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1050,
    width: 850,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Register a global shortcut
  globalShortcut.register('CommandOrControl+Option+I', () => {
    mainWindow.webContents.openDevTools();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Promisify exec for easier use with async/await
const execAsync = promisify(exec);

// Handle folder selection dialog
ipcMain.handle('dialog:openDirectory', async () => {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    properties: ['openDirectory']
  });
  if (canceled) {
    return null;
  } else {
    return filePaths[0];
  }
});

// Get Git branches for a repository
ipcMain.handle('git:getBranches', async (_, repoPath) => {
  try {
    // Get all branches
    const { stdout: branchesOutput } = await execAsync('git branch', { cwd: repoPath });
    
    // Get current branch
    const { stdout: currentBranchOutput } = await execAsync('git branch --show-current', { cwd: repoPath });
    
    // Parse branches output
    const branchNames = branchesOutput
      .split('\n')
      .map(branch => branch.trim())
      .filter(branch => branch.length > 0)
      .map(branch => branch.startsWith('* ') ? branch.substring(2) : branch);
    
    const currentBranch = currentBranchOutput.trim();
    
    // Get commit counts for each branch
    const branchesWithCommits = await Promise.all(branchNames.map(async (branchName) => {
      try {
        // Count commits on this branch that aren't on main/master
        // First, determine if main or master is the default branch
        let defaultBranch = 'main';
        try {
          await execAsync('git show-ref --verify --quiet refs/heads/main', { cwd: repoPath });
        } catch (err) {
          defaultBranch = 'master'; // Fallback to master if main doesn't exist
        }
        
        // Get commit count
        let commitCount = 0;
        try {
          // If we're on the default branch, count all commits
          if (branchName === defaultBranch) {
            const { stdout } = await execAsync(`git rev-list --count ${branchName}`, { cwd: repoPath });
            commitCount = parseInt(stdout.trim(), 10);
          } else {
            // Count commits on this branch that aren't on the default branch
            const { stdout } = await execAsync(`git rev-list --count ${defaultBranch}..${branchName}`, { cwd: repoPath });
            commitCount = parseInt(stdout.trim(), 10);
          }
        } catch (err) {
          console.error(`Error getting commit count for ${branchName}:`, err);
        }
        
        return {
          name: branchName,
          commitCount
        };
      } catch (err) {
        console.error(`Error processing branch ${branchName}:`, err);
        return {
          name: branchName,
          commitCount: 0
        };
      }
    }));
    
    return { branches: branchesWithCommits, currentBranch };
  } catch (error) {
    console.error('Error getting branches:', error);
    return { branches: [], currentBranch: '' };
  }
});

// Delete a Git branch
ipcMain.handle('git:deleteBranch', async (_, repoPath, branchName) => {
  try {
    await execAsync(`git branch -D ${branchName}`, { cwd: repoPath });
    return true;
  } catch (error) {
    console.error('Error deleting branch:', error);
    return false;
  }
});

// Checkout a Git branch
ipcMain.handle('git:checkoutBranch', async (_, repoPath, branchName) => {
  try {
    await execAsync(`git checkout ${branchName}`, { cwd: repoPath });
    return { success: true };
  } catch (error) {
    console.error('Error checking out branch:', error);
    // Return the error message for display in the UI
    return { 
      success: false, 
      errorMessage: error.message || 'Unknown error occurred',
      errorTrace: error.stderr || ''
    };
  }
});

// Fetch from origin
ipcMain.handle('git:fetchOrigin', async (_, repoPath) => {
  try {
    const { stdout } = await execAsync('git fetch origin', { cwd: repoPath });
    return { 
      success: true,
      output: stdout || 'Fetch completed successfully.'
    };
  } catch (error) {
    console.error('Error fetching from origin:', error);
    // Return the error message for display in the UI
    return { 
      success: false, 
      errorMessage: error.message || 'Unknown error occurred',
      errorTrace: error.stderr || ''
    };
  }
});
